#include "stdafx.h"
#include <iostream>
#include <string>
#include <random>


using namespace std;

class Monster
{
public:
	enum MonsterType
	{
		DRAGON,
		GOBLIN,
		OGRE,
		ORC,
		SKELETON,
		TROLL,
		VAMPIRE,
		ZOMBIE,
		MAX_MONSTER_TYPES
	};
private:
	MonsterType m_type;
	string m_name;
	string m_roar;
	int m_hitPoints;
public:
	Monster(MonsterType mon, string name, string roar, int hp) : m_type(mon) , m_name(name), m_roar(roar), m_hitPoints(hp)
	{

	}
	string getTypeString(MonsterType type)
	{
		switch (type)
		{
		case DRAGON:
			return "Dragon";
			break;
		case GOBLIN:
			return "Goblin";
			break;
		case OGRE:
			return "Ogre";
			break;
		case SKELETON:
			return "Skeleton";
			break;
		case TROLL:
			return "Troll";
			break;
		case VAMPIRE:
			return "Troll";
			break;
		case ZOMBIE:
			return "Zombie";
			break;
		}
		return "unknown monster";
	}
	void print()
	{
		cout << m_name << " the " << getTypeString(m_type) << " has " << m_hitPoints << " Hit Point(s) and says " << m_roar << "\n";
	}


};

class MonsterGenerator
{
public:
	static int getRandomNumber(int min, int max)
	{
		random_device rd;
		mt19937 mt(rd());
		uniform_int_distribution<int> dist(min, max);
		return dist(mt);
	}
	static Monster generateMonster()
	{
		
		Monster::MonsterType type = static_cast<Monster::MonsterType>(getRandomNumber(0, Monster::MAX_MONSTER_TYPES - 1));

		static string s_names[6]{ "Undyne", "Sans", "Papyrus", "Toriel", "Mettaton", "Flowey" };
		static string s_roars[6]{ "NGAHH", "Get Dunked", "NYEH", "*nothing*", "Oh Yes", "DIE" };

		return Monster(type, s_names[getRandomNumber(0, 5)], s_roars[getRandomNumber(0, 5)], getRandomNumber(1, 100));
	}
};

int main()
{
	Monster m = MonsterGenerator::generateMonster();
	Monster n = MonsterGenerator::generateMonster();
	m.print();
	n.print();

	return 0;
}
